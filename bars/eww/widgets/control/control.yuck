(defpoll volume_percent :initial 0 :interval "1s" "scripts/getvol")
(defpoll brightness_percent :initial 0 :interval "1s"  "scripts/getbrightness")

;; Icons
(defvar brightness "{{brightness}}")
(defvar volume_zero "{{volume_zero}}")
(defvar volume_low "{{volume_low}}")
(defvar volume_high "{{volume_high}}")
(defvar volume_muted "{{volume_muted}}")
(defvar battery_charging "{{battery_charging}}")
(defvar battery_empty "{{battery_empty}}")
(defvar battery_quarter "{{battery_quarter}}")
(defvar battery_half "{{battery_half}}")
(defvar battery_three_quarter "{{battery_three_quarter}}")
(defvar battery_full "{{battery_full}}")


(defwindow sliders
  :class "sliders"
  :monitor 0
  :geometry (geometry :x "0%"
    :y "8px"
    :x "465px"
  :anchor "top right")
  :stacking "fg"
  :reserve (struts :distance "40px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  :hexpand false
  (sliders)
)

(defwidget sliders []
  (eventbox
    :onhoverlost "eww close sliders"
    (box
      :class "sliders"
      :orientation "v"
      :spacing 20
      :halign "center"
      :valign "center"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (sound_slider)
      (brightness_slider)
      (battery_slider
        :status {EWW_BATTERY["BAT1"].status}
        :value {EWW_BATTERY["BAT1"].capacity}
      )
      (wifi_indicator)
    )
  )
)

(defwidget brightness_slider []
  (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label
      :halign "start"
      :text {brightness}
    )
    (scale
      :halign "start"
      :width 120
      :class "brightbar"
      :value brightness_percent
      :orientation "h"
      :tooltip "${brightness_percent}%"
      :max 100
      :min 0
    :onchange "scripts/setbrightness {}")
    (label 
      :halign "end"
      :text "${brightness_percent}%"
    )
  )
)

(defwidget sound_slider []
  (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label
      :halign "start"
      :text {volume_percent == 0 ? volume_zero :
      volume_percent <= 50 ? volume_low :
      volume_high}
    )
    (
      scale
      :halign "start"
      :width 120
      :class "volbar"
      :value volume_percent
      :orientation "h"
      :max 100.0
      :min 0.0
      :onchange "scripts/setvol {}"
    )
    (label 
      :halign "end"
      :text "${volume_percent}%"
    )
  )
)

(defwidget brightness []
  (box
    :width 30
    :valign "center"
    :halign "center"
    (
      button
      :class "brightness icon brightness-icon"
      :onclick "eww open sliders"
      {brightness}
    )
  )
)

(defwidget volume []
  (box
    :width 30
    :valign "center"
    :halign "center"
    (
      button
      :onclick "eww open sliders"
      :class "volume sound-icon icon"
      {volume_percent == 0 ? volume_zero :
      volume_percent <= 50 ? volume_low :
      volume_high}
    )
  )
)


(defwidget battery[status value]
  (box
    :valign "center"
    :halign "center"
    :width 30
    (button
      :onclick "eww open sliders"
      :class "icon battery-icon"
      :tooltip "${value}%"
      {status == "Charging" ? battery_charging :
      value <= 5 ? battery_empty :
      value <= 25 ? battery_quarter :
      value <= 50 ? battery_half :
      value <= 75 ? battery_three_quarter :
      battery_full
    })
  )
)


(defwidget battery_slider [status value]
  (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label
      :halign "start"
      :text {status == "Charging" ? battery_charging :
      value <= 5 ? battery_empty :
      value <= 25 ? battery_quarter :
      value <= 50 ? battery_half :
      value <= 75 ? battery_three_quarter :
      battery_full}
    )
    (
      scale
      :halign "start"
      :width 120
      :class "batbar"
      :value {EWW_BATTERY["BAT1"].capacity}
      :orientation "h"
      :tooltip {EWW_BATTERY["BAT1"].capacity}
      :max 100.0
      :min 0.0
    )
    (label 
      :halign "end"
      :text "${EWW_BATTERY["BAT1"].capacity}%"
    )
    
  )
)

(defvar wifi_up "{{wifi_up}}")
(defpoll ssid :initial "" :interval "1s"  "scripts/getssid")


(defwidget wifi_indicator []
  (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label
      :halign "start"
      :text {wifi_up}
    )
    (
      label
      :halign "start"
      :text {ssid}
    )
  )
)
