(defvar reveal false)
(defvar camera "{{camera}}")
(defvar display "{{display}}")
(defvar select "{{select}}")
(defvar record "{{record}}")

(defwindow screenshot
  :class "sliders"
  :monitor 0
  :geometry (geometry :x "0%"
    :y "8px"
    :x "830px"
  :anchor "top right")
  :stacking "fg"
  :reserve (struts :distance "40px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  :hexpand false
  (screenshot_mode)
)

(defwidget screenshot_mode []
  (eventbox
    :onhoverlost "eww close screenshot"
    (box
      :class "screenshot-mode"
      :spacing 20
      :halign "center"
      :valign "center"
      :vexpand "false"
      :hexpand "false"
      :orientation "h"
      (box
        (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
          :valign "center"
          :halign "center"
          (
            button
            :class "icon screenshot-display"
            :onclick "scripts/screenshot"
            {display}
          )
        )
        (box :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
          :valign "center"
          :halign "center"
          (
            button
            :class "icon screenshot-area"
            :onclick "scripts/screenshot_area"
            {select}
          )
        )
      )
    )
  )
)

(defwidget screenshot []
  (box
    :width 30
    :valign "center"
    :halign "center"
    :class "icon"
    (button
      :onclick "eww open screenshot"
      (box
        (label :text {camera})
      )
    )
  )
)

(defvar recording false)

(defwidget record []
  (box
    :width 30
    :valign "center"
    :halign "center"
    :class "icon"
    :style {recording ? "background-color: {{red}};" : "" }
    (button
      :onclick "eww update recording=${!recording} && ./scripts/capture"
      (box
        (label :text {record})
      )
    )
  )
)